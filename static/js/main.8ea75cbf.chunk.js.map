{"version":3,"sources":["mssgCard.jsx","Firestore.js","App.js","serviceWorker.js","index.js"],"names":["MssgCard","props","Card","CardHeader","avatar","Avatar","aria-label","name","charAt","toUpperCase","title","subheader","message","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","useState","inptText","setInptText","setInptMssg","inptNameText","setInptNameText","inptNameMssg","setInptNameMssg","mssg","setMssg","addUser","msg","console","log","db","firestore","settings","timestampsInSnapshots","collection","add","SendBtn","a","SendMssg","useEffect","GetData","GetNameText","e","target","value","NameOrWel","TextField","id","size","autoFocus","placeholder","onChange","variant","Button","color","disableElevation","onClick","SendNameBtn","Typography","gutterBottom","get","then","querySnapshot","data","docs","map","doc","interval","setInterval","clearInterval","temp","push","className","Grid","container","spacing","item","xs","sm","i","key","Date","getTime","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.8ea75cbf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\n\r\n// import MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nfunction MssgCard(props)\r\n{\r\nreturn (\r\n    <Card >\r\n    <CardHeader\r\n      avatar={\r\n        <Avatar aria-label=\"recipe\">\r\n          {props.name.charAt(0).toUpperCase()}\r\n        </Avatar>\r\n      }\r\n\r\n      title={props.name}\r\n      subheader={props.message}\r\n    />\r\n    </Card>\r\n\r\n);\r\n\r\n\r\n}\r\n \r\nexport default MssgCard;","import firebase from 'firebase';\r\nconst config = {\r\n    apiKey: \"AIzaSyBjzI8fhZrmSqdjEZmeTduauwEFIHMwPRA\",\r\n    authDomain: \"hay-chat-6498d.firebaseapp.com\",\r\n    databaseURL: \"https://hay-chat-6498d.firebaseio.com\",\r\n    projectId: \"hay-chat-6498d\",\r\n    storageBucket: \"hay-chat-6498d.appspot.com\",\r\n    messagingSenderId: \"1059161882975\",\r\n    appId: \"1:1059161882975:web:0df1f2e6bdb9fb7f8db6ea\",\r\n    measurementId: \"G-0K64NHWQ88\"\r\n};\r\nfirebase.initializeApp(config);\r\nexport default firebase;","import React from \"react\";\nimport { useState } from \"react\";\nimport MssgCard from \"./mssgCard\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from \"@material-ui/core/Grid\";\nimport firestore from \"./Firestore\";\n// import firebase from'firebase'\nimport {useEffect } from 'react'\nimport firebase from 'firebase';\nimport { Typography } from '@material-ui/core';\nimport \"./App.css\";\nfunction App() {\n\n\n\n  const [inptText, setInptText] = useState(\"\");//temp message funct call\n  const[inptMssg,setInptMssg]=useState('')//final message\n  const [inptNameText, setInptNameText] = useState(\"\");//temp name funct call variable\n  const[inptNameMssg,setInptNameMssg]=useState('')//actual name\n  \n\tconst [mssg, setMssg] = useState([\n\t\t{ name: \"hayden\", message: \"here is the mssg \" }\n\t]);\n\n\tconst GetText = (e) => {\n    setInptText(e.target.value);\n    \n  };\n\n\n\n\n\n  const addUser = (msg,name) => {\n   console.log('here',msg,name)\n    const db = firebase.firestore();\n    db.settings({\n      timestampsInSnapshots: true\n    });\n    const userRef = db.collection('users').add({\n      name:name,\n      message:msg\n    });  \n    \n\n  };\n\n\n  const SendBtn=async()=>\n{\n  await console.log('click')\n  await setInptMssg(inptText);\n await setInptText('');\n await console.log(inptText)\n await SendMssg()\n \n}\n\nuseEffect(\n()=>{GetData()},\n[]\n)\nconst GetNameText = (e) => {\n  setInptNameText(e.target.value);\n  \n};\n\n\nconst NameOrWel=()=>{\n  if(inptNameMssg===''){\n    return(<div><TextField id=\"name-input\" size=\"small\" autoFocus placeholder=\"Enter Your Name\" onChange={GetNameText} variant=\"outlined\" value={inptNameText} />\n    <Button variant=\"contained\" color=\"primary\" disableElevation  onClick={SendNameBtn}>\n     Send\n    </Button></div>);\n\n\n  }\n  else{\n    return(\n      <div>\n<Typography gutterBottom variant='h5'>User:{inptNameMssg}</Typography>\n\n      </div>\n    )\n  }\n\n}\n\n\nconst GetData=()=>\n{\n  const db = firebase.firestore();\n  db.collection(\"users\")\n.get()\n.then(querySnapshot => {\n  const data = querySnapshot.docs.map(doc => doc.data());\n  console.log(data); // array of cities objects\n  setMssg(data)}\n)\n\n\n}\nuseEffect(() => {\n  const interval = setInterval(() => {\n    GetData();\n  }, 5000);\n  return () => clearInterval(interval);\n}, []);\n\n\nconst SendMssg=async()=>{\n  await GetData()\nlet temp=[...mssg]\nawait temp.push({name:inptNameMssg,message:inptText})\nawait console.log('before send',temp)\nawait addUser(inptText,inptNameMssg)\nawait setMssg(temp)\n}\n\n\nconst SendNameBtn=()=>\n{\nsetInptNameMssg(inptNameText);\nsetInptNameText('');\nconsole.log(inptNameText)\n}\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{/* <h1>Chat App name</h1> */}\n      <Typography gutterBottom variant='h3'>Group To-Do</Typography>\n        <NameOrWel></NameOrWel>\n      {/* <form  noValidate autoComplete=\"off\"> */}\n      {/* <input onChange={GetText}></input> */}\n\n        {/* </form> */}\n\n\n\t\t\t<div>\n\t\t\t\t<Grid container spacing={3}>\n\t\t\t\t\t<Grid item xs={1} sm={3}></Grid>\n\t\t\t\t\t<Grid item xs={12} sm={6}>\n\t\t\t\t\t\t<Grid container spacing={3}>\n\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t{mssg.map((i) => (\n\t\t\t\t\t\t\t\t\t<div key={new Date().getTime()+i.id+i.message}>\n\t\t\t\t\t\t\t\t\t\t<MssgCard name={i.name} message={i.message} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item xs={1} sm={3}></Grid>\n\t\t\t\t</Grid>\n\n\t\t\t</div>\n      {/* <form  noValidate autoComplete=\"off\"> */}\n      {/* <input onChange={GetText}></input> */}\n      <TextField id=\"mssg-input\" size=\"small\" onChange={GetText} variant=\"outlined\" value={inptText} placeholder=\"Enter To DO\" />\n      <Button variant=\"contained\" color=\"primary\" disableElevation  onClick={SendBtn}>\n       Send\n      </Button>\n        {/* </form> */}\n\n\t\t</div>\n\t);\n}\n\nexport default App;\n\nconst MessgContainer = (mssg) => {\n\treturn (\n\t\t<div>\n\t\t\t<h5>{mssg.name}</h5>\n\t\t\t<h2>{mssg.message}</h2>\n\t\t</div>\n\t);\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}